<apex:component controller="GRIDTaskController" allowDML="true" access="global">
    <style>
        [title~=task] .btn{
            font-size: 12px!important;
            /*line-height: 1.875rem!important;*/
            height: 29px;
            text-decoration: none!important;
            color: #fff!important;
            transition: color 50ms linear,background-color 50ms linear;
            background: #0070d2!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
            vertical-align: middle!important;
            padding: 0px 10px!important;
            font-weight: 500!important;
            border-radius: 0.25rem!important;
            margin:0 4px!important;
            border-color:#d8dde6!important;
        }

        [title~=task] .btnNextPreviPage {
            left: 115px;
            position: relative;
            height: 25px;
            /*line-height: initial!important;*/
            font-size: 12px!important;
            color: #0070d2!important;
            background: #fff!important;
        }

        [title~=task] .btnNextPreviPage:hover{
            background-color: #f4f6f9!important;
        }

        [title~=task] input[type="email"],
        [title~=task] input[type="number"],
        [title~=task] input[type="password"],
        [title~=task] input[type="tel"],
        [title~=task] input[type="url"],
        [title~=task] input[type="text"] {
            background-color: #fff!important;
            color: #16325c!important;
            border: 1px solid #d8dde6!important;
            border-radius: 4px!important;
            transition: border .1s linear,background-color .1s linear!important;
            height:28px!important;
            padding-left: 8px!important;
            padding-right: 8px!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
            font-size: 12px;
        }

        [title~=task] select{
            background-color: #fff!important;
            color: #16325c!important;
            border: 1px solid #d8dde6!important;
            border-radius: 4px!important;
            transition: border .1s linear,background-color .1s linear!important;
            height:28px!important;
            padding-left: 8px!important;
            padding-right: 8px!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
            font-size: 12px;
        }

        [title~=task] a {
            font-family:'Salesforce Sans', Arial, sans-serif!important;
        }

        [title~=task] input[type="email"]:focus,
        [title~=task] input[type="number"]:focus,
        [title~=task] input[type="password"]:focus,
        [title~=task] input[type="tel"]:focus,
        [title~=task] input[type="url"]:focus,
        [title~=task] input[type="text"]:focus,
        [title~=task] select:focus{
            outline: 0!important;
            border-color: #1589ee!important;
            background-color: #fff!important;
            box-shadow: 0 0 3px #0070D2!important;
        }

        [title~=task] .dateOnlyInput input {
            width: 7em !important;
        }

        [title~=task] textarea{
            background-color: #fff!important;
            color: #16325c!important;
            border: 1px solid #d8dde6!important;
            border-radius: 4px!important;
            width: 100px;
            transition: border .1s linear,background-color .1s linear!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
            padding-left: 8px!important;
            padding-right: 8px!important;
            padding-top:5px!important;
        }

        [title~=task] .bPageBlock {
            background:#f4f6f9!important;
            padding:5px!important;
            border-radius: .25rem!important;
        }

        [title~=task] .bPageBlock{
            background : #fff!important;
        }

        [title~=task] .headerRow {
            color: #54698d!important;
            /*text-transform: uppercase;*/
            font-weight: 300!important;
            letter-spacing: .0625rem;
            /*font-family:'Salesforce Sans', Arial, sans-serif!important;*/
            line-height: 1.25;
            font-size: 12px;
            background-color: #fff!important;
        }

        [title~=task] .headerRow [title~=task] th {
            font-size: .75rem;
            line-height: 1.25;
            /*color: #54698d!important;
            text-transform: uppercase;*/
            color: #fff!important;
            letter-spacing: .0625rem;
            background-color: #fff!important;
        }

        [title~=task] body [title~=task] .bPageBlock{
            background-color: #fff!important;
        }

        [title~=task] .pbBody [title~=task] a{
            font-family:'Salesforce Sans', Arial, sans-serif!important;
        }

        [title~=task] body [title~=task] .pbBody [title~=task] table.list
        [title~=task] tr.headerRow [title~=task] th {
            border: none!important;
            border-bottom: 1px solid #d8dde6!important;
            padding: 8px 2px 8px 5px!important;
            border-color:#d8dde6!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
            color: #54698d!important;
        }

        [title~=task] .list [title~=task] td{
            padding: 10px 2px 10px 5px!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
        }

        [title~=task] body [title~=task] .pbBody
        [title~=task] table.list [title~=task] tr.headerRow [title~=task] td,
        [title~=task] body [title~=task] .pbBody
        [title~=task] table.list [title~=task] tr.headerRow [title~=task] th {
            background: #fff!important;
            border:none!important;
            border-bottom: 1px solid #ddd!important;
        }

        [title~=task] .apexp .bPageBlock.apexDefaultPageBlock .pbBody {
                margin-top: -3px!important;
        }

        [title~=task] .buttons {
            text-align: center;
        }

        [title~=task] #taskButtons {
            padding: 8px 20px;
            padding-bottom: 10px;
        }

        [title~=task] .pagination-btn-grp button {
            padding-left: 10px!important;
            padding-right: 10px!important;
            line-height: 2em!important;
        }

        [title~=task] .pagination-btn-grp-wrapper {
            text-align: center;
            width: 200px;
            margin: 0 auto;
            margin-top: -20px;
        }

        #tasksTableInner .boolean-field {
            text-align: center !important;
        }

        #tasksTableInner .reference-field {
            padding-right: 20px !important;
        }

        #tasksTableInner .combobox-field {
            padding-right: 20px !important;
        }

        .cmb .slds-table td, .cmb .slds-table th {
            position: static !important;
        }

        .dateFormat a {
            color: black !important;
            text-decoration: underline !important;
        }
    </style>
    <apex:attribute name="isEditAll" description="This is decides the Editall of records on component."
                    type="Boolean" assignTo="{!taskEditAllFlag}" access="global" />
    <apex:form id="taskform" styleClass="records" title="task">
        <apex:outputLabel rendered="{!taskIsRefrenceField}">
            Please remove '{!taskRefrenceFieldLabel}' field from the 'GRIDTaskFieldset' field set,
            as referenced fields are not allowed.
        </apex:outputLabel>
        <apex:outputPanel id="taskTable" rendered="{!NOT(taskIsRefrenceField)}">
            <script>
                t$ = jQuery.noConflict();
                t$(document).ready(function()
                {
                    t$(".disBtn").prop('disabled', true);
                    t$("a").attr("onmouseover","");
                    t$("[id*='taskTab_lbl']").text( 'Tasks'+' ({!taskRecordCount})');
                    // Added following two lines for new grid home page
                    var tabTitle = t$("[data-tabname='tasks']");
                    tabTitle.text('Tasks'+' ({!taskRecordCount})');
                    t$('#tasksTableInner tr').hover(
                    function() {
                       t$(this).addClass('hoverhighlight');
                    }, function() {
                        t$(this).removeClass('hoverhighlight');
                    });
                    initCallTask();
                    setEventListenersTask();
                });

                function rerenderHandlerTask() {
                    if(typeof rerenderHandler == "function") {
                        rerenderHandler('tasks');
                    }
                    setEventListenersTask();
                }
            </script>

            <apex:pageBlock mode="inlineEdit">
                <div class="buttons" id="taskButtons">
                    <input type="button"
                            onclick="runNewTasks()"
                            class="{!if(taskIsDisable,'btnDisabled disBtn','btn')}"
                            value="New" />
                    <apex:CommandButton action="{!editAllTasks}"
                                        oncomplete="rerenderHandlerTask();"
                                        rendered="{!AND($ObjectType.Task.updateable, NOT(taskEditAllFlag))}"
                                        value="Edit All"
                                        disabled="{!taskIsDisable}" rerender="taskTable"
                                        status="loadingPanel"
                                        immediate="true"/>
                    <input type="button"
                            onclick="runSaveTasks();"
                            class="{!if(taskIsDisable,'btnDisabled disBtn','btn')}"
                            value="Save" />
                    <apex:CommandButton action="{!refreshTasks}"
                                        oncomplete="rerenderHandlerTask();"
                                        value="Refresh"
                                        disabled="{!taskIsDisable}"
                                        rerender="taskTable"
                                        immediate="true"
                                        status="loadingPanel"/>
                    <apex:CommandButton action="{!refreshTasks}"
                                        oncomplete="rerenderHandlerTask();"
                                        value="Cancel"
                                        disabled="{!taskIsDisable}"
                                        rerender="taskTable"
                                        immediate="true"
                                        status="loadingPanel" />
                </div>

                <apex:pageMessages id="pageMessageId" escape="false" />
                <div class="cmb">
                    <div class="slds-scrollable--x" style="position: relative;">
                        <table class="contentTable slds-table slds-table--bordered slds-table--striped"
                                border="0" cellpadding="0" cellspacing="0" id="tasksTableInner">
                            <thead>
                                <tr class="headerRow">
                                    <th class="widthRecordSub">#</th>
                                    <th class="widthActionSub">Action</th>
                                        <apex:repeat value="{!taskFieldsetList}" var="taskfield">
                                            <th class="width10Sub">
                                                <div>
                                                    <apex:outputLabel value="{!taskfield.label}" />
                                                    <apex:outputPanel rendered="{!AND(fieldPathResult != taskField.fieldPath,
                                                                            displaySortingArrow ,
                                                                            taskField.type != 'multipicklist',
                                                                            taskField.type != 'phone')}">
                                                        <img src="{!IF(taskSortExprFieldApi==taskField.fieldPath,
                                                                IF(taskSortDirection=='ASC',
                                                                urlfor($Resource.GRIDResource,
                                                                'GRIDResource/Images/Sort_Asc.png'),
                                                                urlfor($Resource.GRIDResource,
                                                                'GRIDResource/Images/Sort_Desc.png')),
                                                                urlfor($Resource.GRIDResource,
                                                                'GRIDResource/Images/Sort_Both.png'))}"
                                                            style="height:11px;"
                                                            name = "{!taskField.fieldPath}"
                                                            class="sorting"
                                                            onclick="sortCalltask('{!taskField.type}');" />
                                                    </apex:outputPanel>
                                                </div>
                                            </th>
                                        </apex:repeat>
                                    </tr>
                                </thead>
                                <tbody id="actualData">
                                    <apex:repeat value="{!taskWrapperLst}" var="taskWraper" >
                                        <tr class="dataRow">
                                            <td class="widthRecordTdSub">
                                                <apex:outputtext value="{!taskWraper.index + 1}"/>
                                            </td>
    
                                           <td class="widthActionTdSub">
                                                <apex:outputLink value="#"
                                                                target="_blank"
                                                                onclick="openTaskPage('{!taskWraper.task.Id}');"
                                                                rendered="{!NOT(ISBLANK(taskWraper.task.Id))}">
                                                    View
                                                </apex:outputLink>
                                                <apex:outputLabel value="| "
                                                                    rendered="{!NOT(ISBLANK(taskWraper.task.Id))}"/>
                                                <apex:commandLink action="{!deleteTask}"
                                                                  value="Del"
                                                                  rerender="taskTable"
                                                                  rendered="{!NOT(ISBLANK(taskWraper.task.Id))}"
                                                                  status="loadingPanel">
                                                    <apex:param name="indexToRemove"
                                                                value="{!taskWraper.index}"
                                                                assignTo="{!indexToRemove}"></apex:param>
                                                </apex:commandLink>
                                                <apex:commandLink action="{!deleteTask}"
                                                                  value="Remove"
                                                                  rerender="taskTable"
                                                                  rendered="{!(ISBLANK(taskWraper.task.Id))}"
                                                                  styleClass="removeRow"
                                                                  status="loadingPanel"
                                                                  immediate="true">
                                                    <apex:param name="indexToRemove"
                                                                value="{!taskWraper.index}"
                                                                assignTo="{!indexToRemove}"></apex:param>
                                                </apex:commandLink>
                                            </td>
                                            <apex:repeat value="{!taskFieldsetList}" var="field">
                                                <td class="width10TdSub {!field.type}-field">
                                                    <apex:outputField value="{!taskWraper.task[field]}"
                                                                      rendered="{!AND(IF(taskWraper.editIt = false, true, false),
                                                                                NOT(ISBLANK(taskWraper.task.Id)))}">
                                                    </apex:outputField>
                                                    <apex:inputField value="{!taskWraper.task[field]}"
                                                                     rendered="{!OR(IF(taskWraper.editIt = true, true, false),
                                                                                ISBLANK(taskWraper.task.Id))}"/>
                                                </td>
                                            </apex:repeat>
                                        </tr>
                                    </apex:repeat>
                                </tbody>
                            </table>
                        </div>
                        <div style="margin-top: 10px;">
                            {!IF((taskOffsetsize + 1) > taskRecordCount,
                            IF(taskRecordCount - taskBlockSize <= 0, 0, taskRecordCount - taskBlockSize),
                            taskOffsetsize + 1)} - {!TaskWrapperLst.size + taskOffsetsize}
                            of {!taskRecordCount}
                        </div>
                    <!-- panel grid for pagination buttons -->
                        <div class="pagination-btn-grp-wrapper">
                            <div class="slds-button-group pagination-btn-grp" role="group">
                                <button class="slds-button slds-button--neutral first"
                                        onclick="beginning(); return false;">&lt;&lt;</button>
                                <button class="slds-button slds-button--neutral previous"
                                        onclick="previous(); return false;">&lt;</button>
                                <button class="slds-button slds-button--neutral next"
                                        onclick="next(); return false;">&gt;</button>
                                <button class="slds-button slds-button--neutral last"
                                        onclick="end(); return false;">&gt;&gt;</button>
                            </div>
                            <script>
                                t$ = jQuery.noConflict();
                                if("{!taskOffsetsize != 0}" == 'false') {
                                    t$('[title~=task] .pagination-btn-grp .first').attr('disabled', 'disabled');
                                    t$('[title~=task] .pagination-btn-grp .previous').attr('disabled', 'disabled');
                                } else {
                                    t$('[title~=task] .pagination-btn-grp .first').removeAttr('disabled');
                                    t$('[title~=task] .pagination-btn-grp .previous').removeAttr('disabled');
                                }
                                if("{!TaskWrapperLst.size + taskOffsetsize < taskRecordCount}" == 'false') {
                                    t$('[title~=task] .pagination-btn-grp .next').attr('disabled', 'disabled');
                                    t$('[title~=task] .pagination-btn-grp .last').attr('disabled', 'disabled');
                                } else {
                                    t$('[title~=task] .pagination-btn-grp .next').removeAttr('disabled');
                                    t$('[title~=task] .pagination-btn-grp .last').removeAttr('disabled');
                                }
                            </script>
                        </div>
                    </div>
                    <apex:actionFunction name="beginning" action="{!beginning}"
                                        rerender="taskTable" oncomplete="rerenderHandlerTask();"
                                        status="loadingPanel"/>
                    <apex:actionFunction name="previous" action="{!previous}"
                                        rerender="taskTable" oncomplete="rerenderHandlerTask();"
                                        status="loadingPanel"/>
                    <apex:actionFunction name="next" action="{!next}"
                                        rerender="taskTable" oncomplete="rerenderHandlerTask();"
                                        status="loadingPanel"/>
                    <apex:actionFunction name="end" action="{!end}"
                                    rerender="taskTable" oncomplete="rerenderHandlerTask();"
                                    status="loadingPanel"/>
                <!-- ....End of fieldset .... -->
                </apex:pageBlock>

                <apex:inputHidden value="{!taskSortExpression}" id="taskSortHiddencriterian"/>
                <apex:inputHidden value="{!taskSortDirection}" id="taskSortHiddenOrder"/>
                <apex:inputHidden value="{!taskSortExprFieldApi}" id="taskSortFieldApi"/>
        </apex:outputPanel>

        <apex:actionFunction action="{!newTask}"
                                 name="newTasks"
                                 rerender="taskTable"
                                 oncomplete="rerenderHandlerTask();"
                                 status="loadingPanel"/>
        <apex:actionFunction action="{!saveAllTasks}"
                                 name="save"
                                 rerender="taskTable"
                                 oncomplete="rerenderHandlerTask();"
                                 status="loadingPanel"/>
        <apex:actionFunction action="{!sortTask}"
                                 name="sortAllTask"
                                 rerender="taskTable"
                                 oncomplete="rerenderHandlerTask();"
                                 status="loadingPanel" >
            <apex:param name="taskTypeParam" value="" />
        </apex:actionFunction>
    </apex:form>
    <script type="text/javascript">
        var tabIdTask;
        var isInConsoleTask = false;

        function setEventListenersTask() {
            t$("[id$='taskTable'] .width10TdSub a").click(function() {
                var elementId = event.target.id;
                if(elementId.indexOf('lookup') == 0) {
                    if(isInConsoleTask) {
                        openConsoleTabTaskNewTab(event.target.href);
                    } else {
                        window.open(event.target.href);
                    }
                    event.preventDefault();
                }
            });

            t$('[id$=taskTable] .slds-scrollable--x').on('scroll', function() {
                t$(':focus').blur();
                t$('.datePicker').css('display', 'none');
            });
        }

        function initCallTask() {
            setIsConsoleTask();
            getFocusedPrimaryTabIdSubmission();
        }

        function getFocusedPrimaryTabIdSubmission() {
            sforce.console.getFocusedPrimaryTabId(showTabIdTask);
        }

        var showTabIdTask = function showTabIdSubmission(result) {
            //Display the tab ID
            tabIdTask = result.id;
        };

        function setIsConsoleTask() {
            var inConsole = false;
            var url = document.location.href;
            inConsole = url.indexOf('isConsole=1') > -1;
            if(inConsole) {
                isInConsoleTask = inConsole;
            } else {
                isInConsoleTask = sforce.console.isInConsole();
            }
        }

        function openConsoleTabTask(url, tabLabel) {
            sforce.console.openPrimaryTab(tabIdTask, url, true, tabLabel, function(r){});
            sforce.console.closeTab(tabIdTask);
        }

        function openConsoleTabTaskNewTab(url, tabLabel) {
            sforce.console.openPrimaryTab(null, url, true, tabLabel, function(r){});
        }

        function openTaskPage(recordIdToOpen) {
            event.preventDefault();
            if(isInConsoleTask) {
                openConsoleTabTaskNewTab('/'+recordIdToOpen, 'Task');
            } else  {
                window.open('/'+recordIdToOpen);
            }
        }

        function runNewTasks()
        {
            setTimeout(function()
            {
                newTasks();
            }, 100);
        }

        function runSaveTasks()
        {
            setTimeout(function()
            {
                save();
            }, 100);
        }

        function sortCalltask(taskFieldDataType)
        {
            /*
                event.target will have the DOM structure on which the event is fired.
                So here salesforce automically will pick up native html id of the selector
            */
            var taskElement= event.target;
            var newtaskSortCol = t$(taskElement).attr("Name"); // new sort field
            t$("input[id$='taskSortFieldApi']").val(newtaskSortCol);
            var oldtaskSortCol = t$("input[id$='taskSortHiddencriterian']").val();
            var indexTask;
            var taskTempSortExpr;
            if(newtaskSortCol.endsWith('__c'))
            {
                indexTask = newtaskSortCol.indexOf('__');
            }
            else if(newtaskSortCol.endsWith('Id'))
            {
                indexTask = newtaskSortCol.indexOf('Id');
            }
            if(indexTask != null) {
                taskTempSortExpr = newtaskSortCol.substring(0, indexTask);
            }
            else
            {
                taskTempSortExpr = newtaskSortCol;
            }
            //if(String(newtaskSortCol) == String(oldtaskSortCol))
            if(oldtaskSortCol.indexOf(taskTempSortExpr) != -1)
            {
                if(String(t$("input[id$='taskSortHiddenOrder']").val()) == "ASC")
                {
                    t$("input[id$='taskSortHiddenOrder']").val("DESC");
                    t$(taskElement).removeClass('SortAsc').addClass('SortDesc');
                }
                else
                {
                    t$("input[id$='taskSortHiddenOrder']").val("ASC");
                    t$(taskElement).removeClass('SortDesc').addClass('SortAsc');
                }
                t$("input[id$='taskSHiddencriterian']").val(newtaskSortCol);
                sortAllTask(taskFieldDataType);
            }
            else
            {
                t$("input[id$='taskSortHiddencriterian']").val(newtaskSortCol);
                t$("input[id$='taskSortHiddenOrder']").val("ASC");
                t$(taskElement).removeClass('sorting').addClass('SortAsc');
                sortAllTask(taskFieldDataType);
            }
        }
    </script>
</apex:component>