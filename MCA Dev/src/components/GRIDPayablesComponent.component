<apex:component controller="GRIDPayablesController" allowDML="true" access="global">
    <style>
        [title~=Payable] .btn{
            font-size: 12px!important;
            /*line-height: 1.875rem!important;*/
            height: 29px;
            text-decoration: none!important;
            color: #fff!important;
            transition: color 50ms linear,background-color 50ms linear;
            background: #0070d2!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
            vertical-align: middle!important;
            padding: 0px 10px!important;
            font-weight: 500!important;
            border-radius: 0.25rem!important;
            margin:0 4px!important;
            border-color:#d8dde6!important;
        }

        [title~=Payable] .btnNextPreviPage {
            left: 115px;
            position: relative;
            height: 25px;
            /*line-height: initial!important;*/
            font-size: 12px!important;
            color: #0070d2!important;
            background: #fff!important;
        }

        [title~=Payable] .btnNextPreviPage:hover{
            background-color: #f4f6f9!important;
        }

        [title~=Payable] input[type="email"],
        [title~=Payable] input[type="number"],
        [title~=Payable] input[type="password"],
        [title~=Payable] input[type="tel"],
        [title~=Payable] input[type="url"],
        [title~=Payable] input[type="text"] {
            background-color: #fff!important;
            color: #16325c!important;
            border: 1px solid #d8dde6!important;
            border-radius: 4px!important;
            transition: border .1s linear,background-color .1s linear!important;
            height:28px!important;
            padding-left: 8px!important;
            padding-right: 8px!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
            font-size: 12px;
        }

        [title~=Payable] select{
            background-color: #fff!important;
            color: #16325c!important;
            border: 1px solid #d8dde6!important;
            border-radius: 4px!important;
            transition: border .1s linear,background-color .1s linear!important;
            height:28px!important;
            padding-left: 8px!important;
            padding-right: 8px!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
            font-size: 12px;
            }

        [title~=Payable] a {
            font-family:'Salesforce Sans', Arial, sans-serif!important;
        }

        [title~=Payable] input[type="email"]:focus,
        [title~=Payable] input[type="number"]:focus,
        [title~=Payable] input[type="password"]:focus,
        [title~=Payable] input[type="tel"]:focus,
        [title~=Payable] input[type="url"]:focus,
        [title~=Payable] input[type="text"]:focus,
        [title~=Payable] select:focus{
            outline: 0!important;
            border-color: #1589ee!important;
            background-color: #fff!important;
            box-shadow: 0 0 3px #0070D2!important;
        }

        [title~=Payable] .dateOnlyInput input {
            width: 7em !important;
        }

        [title~=Payable] textarea{
            background-color: #fff!important;
            color: #16325c!important;
            border: 1px solid #d8dde6!important;
            border-radius: 4px!important;
            width: 100px;
            transition: border .1s linear,background-color .1s linear!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
            padding-left: 8px!important;
            padding-right: 8px!important;
            padding-top:5px!important;
        }

        [title~=Payable] .bPageBlock {
            background:#f4f6f9!important;
            padding:5px!important;
            border-radius: .25rem!important;
        }

        [title~=Payable] .bPageBlock{
            background : #fff!important;
        }

        [title~=Payable] .headerRow {
            color: #54698d!important;
            font-weight: 300!important;
            letter-spacing: .0625rem;
            line-height: 1.25;
            font-size: 12px;
            background-color: #fff!important;
        }

        [title~=Payable] .headerRow [title~=Payable] th {
            font-size: .75rem;
            line-height: 1.25;
            /*color: #54698d!important;
            text-transform: uppercase;*/
            color: #fff!important;
            letter-spacing: .0625rem;
            background-color: #fff!important;
        }

        [title~=Payable] body [title~=Payable] .bPageBlock{
            background-color: #fff!important;
        }

        [title~=Payable] .pbBody [title~=Payable] a{
            font-family:'Salesforce Sans', Arial, sans-serif!important;
        }

        [title~=Payable] body [title~=Payable] .pbBody [title~=Payable] table.list
        [title~=Payable] tr.headerRow [title~=Payable] th {
            border: none!important;
            border-bottom: 1px solid #d8dde6!important;
            padding: 8px 2px 8px 5px!important;
            border-color:#d8dde6!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
            color: #54698d!important;
        }

        [title~=Payable] .list [title~=Payable] td{
            padding: 10px 2px 10px 5px!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
        }

        [title~=Payable] body [title~=Payable] .pbBody
        [title~=Payable] table.list [title~=Payable] tr.headerRow [title~=Payable] td,
        [title~=Payable] body [title~=Payable] .pbBody
        [title~=Payable] table.list [title~=Payable] tr.headerRow [title~=Payable] th {
            background: #fff!important;
            border:none!important;
            border-bottom: 1px solid #ddd!important;
        }

        [title~=Payable] .apexp .bPageBlock.apexDefaultPageBlock .pbBody {
            margin-top: -3px!important;
        }

        [title~=Payable] .buttons {
            text-align: center;
        }

        [title~=Payable] #payableButtons {
            padding: 8px 20px;
            padding-bottom: 10px;
        }

        [title~=Payable] .pagination-btn-grp button {
            padding-left: 10px!important;
            padding-right: 10px!important;
            line-height: 2em!important;
        }

        [title~=Payable] .pagination-btn-grp-wrapper {
            text-align: center;
            width: 200px;
            margin: 0 auto;
            margin-top: -20px;
        }

        #payablesTableInner .boolean-field {
            text-align: center !important;
        }

        #payablesTableInner .reference-field {
            padding-right: 20px !important;
        }

        .cmb .slds-table td, .cmb .slds-table th {
            position: static !important;
        }

        .dateFormat a {
            color: black !important;
            text-decoration: underline !important;
        }
        
        [title~=Payable] tfoot {
            border-top: 1px solid gainsboro;
        }
    </style>

    <apex:attribute name="isEditAll" description="This is decides the Editall of records on component."
                    type="Boolean" assignTo="{!payEditAllFlag}" access="global" />
      <apex:form id="Payablesform" styleClass="records" title="Payable">
        <apex:outputLabel rendered="{!payIsRefrenceField}">
            Please remove '{!payRefrenceFieldLabel}' field from the 'GRIDPayableFieldSet' field set,
            as referenced fields are not allowed.
        </apex:outputLabel>
        <apex:outputPanel id="paytable" title="Payable" rendered="{!NOT(payIsRefrenceField)}">
            <script type="text/javascript">
                t$ = jQuery.noConflict();
                t$(document).ready(function()
                {
                    t$(".disBtn").prop('disabled', true);
                    t$("a").attr("onmouseover","");
                    t$("[id*='payableTab_lbl']").text( 'Payables'+' ({!payRecordCount})');
                    // Added following two lines for new grid home page
                    var tabTitle = t$("[data-tabname='payables']");
                    tabTitle.text('Payables'+' ({!payRecordCount})');
                    t$('#payablesTableInner tr').hover(function() {
                        t$(this).addClass('hoverhighlight');
                    }, function() {
                        t$(this).removeClass('hoverhighlight');
                    });
                    initCallPayables();
                    setEventListenersPayable();
                });
                    //save functionality
                function rerenderHandlerPayables() {
                    if(typeof rerenderHandler == "function") {
                        rerenderHandler('payables');
                    }
                    setEventListenersPayable();
                }
            </script>
            <apex:pageBlock mode="inlineEdit">
                <div class="buttons" id="payableButtons">
                    <apex:outputpanel rendered="{!$ObjectType.Payable__c.createable}">
                        <input type="button"
                               onclick="runNewPayable()"
                               class="{!if(payIsDisable,'btnDisabled disBtn','btn')}"
                               value="New"
                               status="loadingPanel"/>
                    </apex:outputPanel>
                    <apex:outputpanel rendered="{!AND($ObjectType.Payable__c.updateable,
                                                NOT(payEditAllFlag))}">
                        <apex:CommandButton action="{!editAllPayables}"
                                            value="Edit All"
                                            disabled="{!payIsDisable}"
                                            rerender="paytable"
                                            oncomplete="rerenderHandlerPayables();"
                                            status="loadingPanel"
                                            immediate="true"/>
                    </apex:outputPanel>
                    <apex:outputpanel rendered="{!OR($ObjectType.Payable__c.updateable,
                                                $ObjectType.Payable__c.createable)}">
                        <input type="button"
                                onclick="runSavePayables()"
                                class="{!if(payIsDisable,'btnDisabled disBtn','btn')}" 
                                value="Save"
                                status="loadingPanel" />
                    </apex:outputPanel>
                    <apex:CommandButton action="{!refreshPayables}"
                                        value="Refresh"
                                        disabled="{!payIsDisable}"
                                        oncomplete="rerenderHandlerPayables();"
                                        rerender="paytable" status="loadingPanel"
                                        immediate="true" />
                    <apex:CommandButton action="{!refreshPayables}"
                                        value="Cancel"
                                        disabled="{!payIsDisable}"
                                        oncomplete="rerenderHandlerPayables();"
                                        rerender="paytable"
                                        status="loadingPanel"
                                        immediate="true" />
                </div>

                <apex:pageMessages id="paypgMsgId" escape="false" />
                <div class="cmb">
                    <div class="slds-scrollable--x" style="position: relative;">
                        <table class="contentTable slds-table slds-table--bordered slds-table--striped"
                                    border="0" cellpadding="0" cellspacing="0" id="payablesTableInner">
                            <tbody>
                                <tr class="headerRow">
                              <th class="widthRecordSub">#</th>
                              <th class="widthActionSub">Action</th>
                              <apex:repeat value="{!payFieldsetList}" var="payField">
                               <th class="width10Sub">
                                   <div>
                                       <apex:outputLabel value="{!payField.label}"/>
                                       <apex:outputPanel rendered="{!AND(fieldPathResult != payField.fieldPath, 
                                                                 displaySortingArrow,
                                                                 payField.type != 'multipicklist',
                                                                 payField.type != 'phone')}">
                                           <img src= "{!IF(paySortExprFieldApi==payField.fieldPath,
                                                         IF(paySortDirection=='ASC',urlfor($Resource.GRIDResource,
                                                         'GRIDResource/Images/Sort_Asc.png'),
                                                         urlfor($Resource.GRIDResource,
                                                         'GRIDResource/Images/Sort_Desc.png')),
                                                         urlfor($Resource.GRIDResource,
                                                         'GRIDResource/Images/Sort_Both.png'))}"
                                                 style="height:11px;"
                                                 name="{!payField.fieldPath}"
                                                 class="sorting"
                                                 onclick="sortCallPayables('{!payField.type}');" />
                                       </apex:outputPanel>
                                   </div>
                               </th>
                              </apex:repeat>
                          </tr>
                                <apex:repeat value="{!payWrapperLst}" var="payWraper" >
                                    <tr class="dataRow">
                                        <td class="widthRecordTdSub">
                                            <apex:outputtext value="{!payWraper.payIndex + 1}"/>
                                            <apex:outputPanel style="display: none;">
                                                <apex:inputfield value="{!payWraper.pay['Opportunity__c']}" />
                                            </apex:outputPanel>
                                        </td>
                                        <td class="widthActionTdSub">
                                            <apex:outputLink value="#"
                                                             target="_blank"
                                                             onclick="openPayablePage('{!payWraper.pay.Id}');"
                                                             rendered="{!NOT(ISBLANK(payWraper.pay.Id))}">
                                                View
                                            </apex:outputLink>
                                            <apex:outputLabel value="| "
                                                                rendered="{!AND(NOT(ISBLANK(payWraper.pay.Id)),
                                                                        $ObjectType.Payable__c.deletable)}"/>
                                            <apex:commandLink action="{!deletePay}"
                                                              value="Del"
                                                              rerender="paytable"
                                                              rendered="{!AND(NOT(ISBLANK(payWraper.pay.Id)),
                                                                    $ObjectType.Payable__c.deletable)}"
                                                              status="loadingPanel">
                                                <apex:param name="payIndexToRemove"
                                                            value="{!payWraper.payIndex}"
                                                            assignTo="{!payIndexToRemove}"></apex:param>
                                            </apex:commandLink>
                                            <apex:commandLink action="{!deletePay}"
                                                              value="Remove"
                                                              rerender="paytable"
                                                              rendered="{!(ISBLANK(payWraper.pay.Id))}"
                                                              styleClass="removeRow" status="loadingPanel"
                                                              immediate="true">
                                                <apex:param name="payIndexToRemove"
                                                            value="{!payWraper.payIndex}"
                                                            assignTo="{!payIndexToRemove}"></apex:param>
                                            </apex:commandLink>
                                        </td>
                                        <apex:repeat value="{!payFieldsetList}" var="payfield">
                                            <td class="width10TdSub {!payfield.type}-field">
                                                <apex:outputField value="{!payWraper.pay[payfield]}"
                                                                  rendered="{!AND(IF(payWraper.payEdit = false, true, false),
                                                                            NOT(ISBLANK(payWraper.pay.Id)))}" />
                                                <apex:inputField value="{!payWraper.pay[payfield]}"
                                                                 rendered="{!OR(IF(payWraper.payEdit = true, true, false),
                                                                        ISBLANK(payWraper.pay.Id))}"/>
                                            </td>
                                        </apex:repeat>
                                    </tr>
                                </apex:repeat>
                            </tbody>
                            <tfoot>
                                <tr class = "headerRow">
                                    <td class="widthRecordSub"><b>Total</b></td>
                                    <td class="widthActionSub"></td>
                                    <apex:repeat value="{!payFieldsetList}" var="payfield">
                                        <td class="width10Sub">
                                            <b>
                                                <apex:outputText value="{!currencySymbolPayables}{0, number, ###,###,###,##0.00}"
                                                                rendered="{!AND(payFieldToSumMap[payfield.fieldPath] != -999.999,
                                                                        payfield.type== 'currency')}" >
                                                    <apex:param value="{!payFieldToSumMap[payfield.fieldPath]}" />
                                                </apex:outputText>
                                            </b>
                                            <b>
                                                <apex:outputText value="{0, number, ###,###,###,##0.00}"
                                                                 rendered="{!AND(payFieldToSumMap[payfield.fieldPath] != -999.999,
                                                                            payfield.type!= 'currency')}" >
                                                    <apex:param value="{!payFieldToSumMap[payfield.fieldPath]}" />
                                                </apex:outputText>
                                            </b>
                                        </td>
                                    </apex:repeat>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                    <div style="margin-top: 10px;">
                        {!IF((payOffsetsize + 1) > payRecordCount,
                        IF(payRecordCount - payBlockSize <= 0, 0, payRecordCount - payBlockSize),
                        payOffsetsize + 1)} - {!payWrapperLst.size + payOffsetsize}
                        of {!payRecordCount}
                    </div>
                    <div class="pagination-btn-grp-wrapper">
                        <div class="slds-button-group pagination-btn-grp" role="group">
                            <button class="slds-button slds-button--neutral first"
                                    onclick="beginningPayable(); return false;">&lt;&lt;</button>
                            <button class="slds-button slds-button--neutral previous"
                                    onclick="previousPayable(); return false;">&lt;</button>
                            <button class="slds-button slds-button--neutral next"
                                    onclick="nextPayable(); return false;">&gt;</button>
                            <button class="slds-button slds-button--neutral last"
                                    onclick="endPayable(); return false;">&gt;&gt;</button>
                        </div>
                        <script>
                            t$ = jQuery.noConflict();
                            if("{!payOffsetsize != 0}" == 'false') {
                                t$('[title~=Payable] .pagination-btn-grp .first').attr('disabled', 'disabled');
                                t$('[title~=Payable] .pagination-btn-grp .previous').attr('disabled', 'disabled');
                            } else {
                                t$('[title~=Payable] .pagination-btn-grp .first').removeAttr('disabled');
                                t$('[title~=Payable] .pagination-btn-grp .previous').removeAttr('disabled');
                            }
                            if("{!payWrapperLst.size + payOffsetsize < payRecordCount}" == 'false') {
                                t$('[title~=Payable] .pagination-btn-grp .next').attr('disabled', 'disabled');
                                t$('[title~=Payable] .pagination-btn-grp .last').attr('disabled', 'disabled');
                            } else {
                                t$('[title~=Payable] .pagination-btn-grp .next').removeAttr('disabled');
                                t$('[title~=Payable] .pagination-btn-grp .last').removeAttr('disabled');
                            }
                        </script>
                    </div>
                </div>
                <apex:actionFunction name="beginningPayable"
                                         action="{!beginningPayable}"
                                         rerender="paytable"
                                         oncomplete="rerenderHandlerPayables();"
                                         status="loadingPanel"/>
                <apex:actionFunction name="previousReceivable"
                                         action="{!previousPayable}"
                                         rerender="paytable"
                                         oncomplete="rerenderHandlerPayables();"
                                         status="loadingPanel"/>
                <apex:actionFunction name="nextPayable"
                                         action="{!nextPayable}"
                                         rerender="paytable"
                                         oncomplete="rerenderHandlerPayables();"
                                         status="loadingPanel"/>
                <apex:actionFunction name="endPayable"
                                         action="{!endPayable}"
                                         rerender="paytable"
                                         oncomplete="rerenderHandlerPayables();"
                                         status="loadingPanel"/>
                <!-- panel grid for pagination buttons -->
            </apex:pageBlock>
            <apex:inputHidden value="{!paySortExpression}" id="paySortHiddencriterian"/>
            <apex:inputHidden value="{!paySortDirection}" id="paySortHiddenOrder"/>
            <apex:inputHidden value="{!paySortExprFieldApi}" id="paySortFieldApi"/>
        </apex:outputPanel>

        <apex:actionFunction action="{!newPay}"
                             name="newPay" 
                             oncomplete="rerenderHandlerPayables();" 
                             rerender="paytable" 
                             status="loadingPanel"/>
        <apex:actionFunction action="{!savePayables}" 
                             name="savePayables" 
                             oncomplete="rerenderHandlerPayables();" 
                             rerender="paytable" 
                             status="loadingPanel"/>
        <apex:actionFunction action="{!sortPayables}" 
                             name="sortAllPayables" 
                             oncomplete="rerenderHandlerPayables();" 
                             rerender="paytable" 
                             status="loadingPanel" >
                <apex:param name="payTypeParam" value="" />
        </apex:actionFunction>
    </apex:form>
    <script>
        var isInConsolePayables = false;
        var tabIdPayables;

        function setEventListenersPayable() {
            t$("[id$=paytable] .width10TdSub a").click(function() {
                var elementId = event.target.id;
                if(elementId.indexOf('lookup') == 0) {
                    if(isInConsolePayables) {
                        openConsoleTabPayablesNewTab(event.target.href);
                    } else {
                        window.open(event.target.href);
                    }
                    event.preventDefault();
                }
            });

            t$('[id$=paytable] .slds-scrollable--x').on('scroll', function() {
                t$(':focus').blur();
                t$('.datePicker').css('display', 'none');
            });
        }

        function initCallPayables() {
            setIsConsolePayables();
            getFocusedPrimaryTabIdPayables();
        }

        function setIsConsolePayables() {
            var inConsole = false;
            var url = document.location.href;
            inConsole = url.indexOf('isConsole=1') > -1;
            if(inConsole) {
                isInConsolePayables = inConsole;
            } else {
                isInConsolePayables = sforce.console.isInConsole();
            }
        }
        function getFocusedPrimaryTabIdPayables() {
            sforce.console.getFocusedPrimaryTabId(showTabIdPayables);
        }

        var showTabIdPayables = function showTabIdSubmission(result) {
            //Display the tab ID
            tabIdPayables = result.id;
        };
        function openConsoleTabPayables(url, tabLabel) {
            sforce.console.openPrimaryTab(tabIdPayables, url, true, tabLabel, function(r){});
            sforce.console.closeTab(tabIdPayables);
        }

        function openConsoleTabPayablesNewTab(url, tabLabel) {
            sforce.console.openPrimaryTab(null, url, true, tabLabel, function(r){});
        }

        function openPayablePage(recordIdToOpen) {
            event.preventDefault();
            if(isInConsolePayables) {
                openConsoleTabPayablesNewTab('/'+recordIdToOpen, 'Payables');
            } else  {
                window.open('/'+recordIdToOpen);
            }
        }

        function runNewPayable()
        {
            setTimeout(function()
            {
                newPay();
            }, 100);
        }

        function runSavePayables()
        {
            setTimeout(function()
            {
                savePayables();
            }, 100);
        }

        function sortCallPayables(payFieldDataType)
        {
            /*
              event.target will have the DOM structure on which the event is fired.So here salesforce automically will
              pick up native html id of the selector
            */
            var payElement = event.target;
            var newPaySortCol = t$(payElement).attr("Name"); // new sort field
            t$("input[id$='paySortFieldApi']").val(newPaySortCol);
            var oldPaySortCol = t$("input[id$='paySortHiddencriterian']").val();
            var indexPay;
            var payTempSortExpr;
            if(newPaySortCol.endsWith('__c'))
            {
                indexPay = newPaySortCol.indexOf('__');
            }
            else if(newPaySortCol.endsWith('Id'))
            {
                indexPay = newPaySortCol.indexOf('Id');
            }

            if(indexPay != null) {
                payTempSortExpr = newPaySortCol.substring(0, indexPay);
            }else {
                payTempSortExpr = newPaySortCol;
            }

            //if(String(newPaySortCol) == String(oldPaySortCol))
            if(oldPaySortCol.indexOf(payTempSortExpr) != -1)
            {
                if(String(t$("input[id$='paySortHiddenOrder']").val()) == "ASC")
                {
                  t$("input[id$='paySortHiddenOrder']").val("DESC");
                  t$(payElement).removeClass('SortAsc').addClass('SortDesc');
                }
                else
                {
                  t$("input[id$='paySortHiddenOrder']").val("ASC");
                  t$(payElement).removeClass('SortDesc').addClass('SortAsc');
                }
                t$("input[id$='paySortHiddencriterian']").val(newPaySortCol);
                sortAllPayables(payFieldDataType);
            }
            else
            {
                t$("input[id$='paySortHiddencriterian']").val(newPaySortCol);
                t$("input[id$='paySortHiddenOrder']").val("ASC");
                t$(payElement).removeClass('sorting').addClass('SortAsc');
                sortAllPayables(payFieldDataType);
            }
        }
    </script>
</apex:component>