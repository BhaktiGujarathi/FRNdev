<apex:component controller="GRIDLoanBalanceController" allowDML="true" access="global">

    <style>
        .buttons {
            text-align: center;
        }

        #openBalanceButtons {
            padding: 8px 20px;
            padding-bottom: 10px;
        }

        [title~=openBalance] .btn{
            font-size: 12px!important;
            /*line-height: 1.875rem!important;*/
            height: 29px;
            text-decoration: none!important;
            color: #fff!important;
            transition: color 50ms linear,background-color 50ms linear;
            background: #0070d2!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
            vertical-align: middle!important;
            padding: 0px 10px!important;
            font-weight: 500!important;
            border-radius: 0.25rem!important;
            margin:0 4px!important;
            border-color:#d8dde6!important;
        }

        [title~=openBalance] .btnNextPreviPage {
            left: 115px;
            position: relative;
            height: 25px;
            /*line-height: initial!important;*/
            font-size: 12px!important;
            color: #0070d2!important;
            background: #fff!important;
        }

        [title~=openBalance] .btnNextPreviPage:hover{
            background-color: #f4f6f9!important;
        }

        [title~=openBalance] input[type="email"],
        [title~=openBalance] input[type="number"],
        [title~=openBalance] input[type="password"],
        [title~=openBalance] input[type="tel"],
        [title~=openBalance] input[type="url"],
        [title~=openBalance] input[type="text"] {
            background-color: #fff!important;
            color: #16325c!important;
            border: 1px solid #d8dde6!important;
            border-radius: 4px!important;
            transition: border .1s linear,background-color .1s linear!important;
            height:28px!important;
            padding-left: 8px!important;
            padding-right: 8px!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
            font-size: 12px;
        }

        [title~=openBalance] select{
            background-color: #fff!important;
            color: #16325c!important;
            border: 1px solid #d8dde6!important;
            border-radius: 4px!important;
            transition: border .1s linear,background-color .1s linear!important;
            height:28px!important;
            padding-left: 8px!important;
            padding-right: 8px!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
            font-size: 12px;
            }

        /*[title~=openBalance] select{
            width: 85%!important;
        }

        [title~=openBalance] .datePicker select {
            width: 36%!important;
        }*/

        [title~=openBalance] a {
            font-family:'Salesforce Sans', Arial, sans-serif!important;
        }

        [title~=openBalance] input[type="email"]:focus,
        [title~=openBalance] input[type="number"]:focus,
        [title~=openBalance] input[type="password"]:focus,
        [title~=openBalance] input[type="tel"]:focus,
        [title~=openBalance] input[type="url"]:focus,
        [title~=openBalance] input[type="text"]:focus,
        [title~=openBalance] select:focus{
            outline: 0!important;
            border-color: #1589ee!important;
            background-color: #fff!important;
            box-shadow: 0 0 3px #0070D2!important;
        }

        [title~=openBalance] .dateOnlyInput input {
            width: 7em !important;
        }

        [title~=openBalance] textarea{
            background-color: #fff!important;
            color: #16325c!important;
            border: 1px solid #d8dde6!important;
            border-radius: 4px!important;
            width: 100px;
            transition: border .1s linear,background-color .1s linear!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
            padding-left: 8px!important;
            padding-right: 8px!important;
            padding-top:5px!important;
        }

        [title~=openBalance] .apexp .bPageBlock.apexDefaultPageBlock .pbBody {
            margin-top: -3px!important;
        }

        [title~=openBalance] .bPageBlock {
            background:#f4f6f9!important;
            padding:5px!important;
            border-radius: .25rem!important;
        }

        [title~=openBalance] .bPageBlock{
            background : #fff!important;
        }

        [title~=openBalance] .headerRow {
            color: #54698d!important;
            /*text-transform: uppercase;*/
            font-weight: 300!important;
            letter-spacing: .0625rem;
            /*font-family:'Salesforce Sans', Arial, sans-serif!important;*/
            line-height: 1.25;
            font-size: 12px;
            background-color: #fff!important;
        }
        [title~=openBalance] .headerRow [title~=openBalance] th {
            font-size: .75rem;
            line-height: 1.25;
            /*color: #54698d!important;
            text-transform: uppercase;*/
            color: #fff!important;
            letter-spacing: .0625rem;
            background-color: #fff!important;
        }

        [title~=openBalance] body [title~=openBalance] .bPageBlock{
            background-color: #fff!important;
        }
        [title~=openBalance] .pbBody [title~=openBalance] a{
            font-family:'Salesforce Sans', Arial, sans-serif!important;
        }
        [title~=openBalance] body [title~=openBalance] .pbBody [title~=openBalance] table.list
        [title~=openBalance] tr.headerRow [title~=openBalance] th {
            border: none!important;
            border-bottom: 1px solid #d8dde6!important;
            padding: 8px 2px 8px 5px!important;
            border-color:#d8dde6!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
            color: #54698d!important;
        }

        [title~=openBalance] .list [title~=openBalance] td{
            padding: 10px 2px 10px 5px!important;
            font-family:'Salesforce Sans', Arial, sans-serif!important;
        }
        [title~=openBalance] body [title~=openBalance] .pbBody
        [title~=openBalance] table.list [title~=openBalance] tr.headerRow [title~=openBalance] td,
        [title~=openBalance] body [title~=openBalance] .pbBody
        [title~=openBalance] table.list [title~=openBalance] tr.headerRow [title~=openBalance] th {
            background: #fff!important;
            border:none!important;
            border-bottom: 1px solid #ddd!important;
        }

        [title~=openBalance] .pagination-btn-grp button {
            padding-left: 10px!important;
            padding-right: 10px!important;
            line-height: 2em!important;
        }

        [title~=openBalance] .pagination-btn-grp-wrapper {
            text-align: center;
            width: 200px;
            margin: 0 auto;
            margin-top: -20px;
        }

        #loanBalanceTableInner .boolean-field {
            text-align: center !important;
        }

        #loanBalanceTableInner .reference-field {
            padding-right: 20px !important;
        }

        .cmb .slds-table td, .cmb .slds-table th {
            position: static !important;
        }

        .dateFormat a {
            color: black !important;
            text-decoration: underline !important;
        }
        [title~=openBalance] tfoot {
            border-top: 1px solid gainsboro;
        }
    </style>

    <apex:attribute name="isEditAll" description="This is decides the Editall of records on component."
                    type="Boolean" assignTo="{!loanBalEditAllFlag}" access="global" />
    <apex:form id="LoanBalanceform" styleClass="records" title="openBalance">
        <apex:outputLabel rendered="{!loanBalIsRefrenceField}">
            Please remove '{!loanBalRefrenceFieldLabel}'
            field from the 'GRIDLoanBalanceFieldSet' field set, as referenced fields are not allowed.
        </apex:outputLabel>

        <apex:actionStatus id="loadingPanel" layout="block">
            <apex:facet name="start">
                <div class="cmb">
                    <div class="slds-spinner_container">
                        <div role="status" class="slds-spinner slds-spinner--medium slds-spinner--brand">
                            <span class="slds-assistive-text">Loading</span>
                            <div class="slds-spinner__dot-a"></div>
                            <div class="slds-spinner__dot-b"></div>
                        </div>
                    </div>
                </div>
            </apex:facet>
        </apex:actionStatus>
        <!--
        <script type="text/javascript">
            t$(".saveBtn").click(function(){
                t$('.saveBtn').prop('disabled', true);
            });
        </script> -->

        <apex:outputPanel id="loanBalTable" rendered="{!NOT(loanBalIsRefrenceField)}">
            <script type="text/javascript">
                t$ = jQuery.noConflict();
                t$(document).ready(function()
                {
                    t$(".disBtn").prop('disabled', true);
                    t$("a").attr("onmouseover","");
                    t$("[id*='loanbalanceTab_lbl']").text( 'Open Balances'+' ({!loanBalRecordCount})');
                    // Added following two lines for new grid home page
                    var tabTitle = t$("[data-tabname='loanBalances']");
                    tabTitle.text('Open Balances'+' ({!loanBalRecordCount})');
                    t$('#loanBalanceTableInner tr').hover(
                    function() {
                       t$(this).addClass('hoverhighlight');
                    }, function() {
                        t$(this).removeClass('hoverhighlight');
                    });
                    initCallOffer();
                    setEventListenersLoanBalance();
                });

                function rerenderHandlerOpenBalance() {
                    if(typeof rerenderHandler == "function") {
                        rerenderHandler('loanBalances');
                    }
                    setEventListenersLoanBalance();
                }
            </script>

            <apex:pageBlock mode="inlineEdit">
                <div class="buttons" id="openBalanceButtons">
                    <apex:outputpanel rendered="{!$ObjectType.Loan_Balance__c.createable}">
                        <input type="button"
                               onclick="runNewLoanBalance()" 
                               class="{!if(isDisable,'btnDisabled disBtn','btn')}"
                               value="New"
                               status="loadingPanel"  />
                    </apex:outputPanel>
                    <apex:outputpanel rendered="{!AND($ObjectType.Loan_Balance__c.updateable,
                                            NOT(loanBalEditAllFlag))}">
                        <apex:CommandButton action="{!editAllLoanBalances}"
                                            value="Edit All"
                                            rerender="loanBalTable"
                                            oncomplete="rerenderHandlerOpenBalance();"
                                            status="loadingPanel"
                                            disabled="{!isDisable}"
                                            immediate="true"/>
                    </apex:outputPanel>
                    <apex:outputpanel rendered="{!OR($ObjectType.Loan_Balance__c.updateable,
                                            $ObjectType.Loan_Balance__c.createable)}">
                        <input type="button" 
                               onclick="runSaveLoanBalances()"
                               class="{!if(isDisable,'btnDisabled disBtn','btn')}"
                               value="Save"
                               status="loadingPanel" />
                    </apex:outputPanel>
                    <apex:CommandButton action="{!refreshLoanBalances}"
                                        value="Refresh"
                                        rerender="loanBalTable"
                                        oncomplete="rerenderHandlerOpenBalance();"
                                        status="loadingPanel"
                                        immediate="true"
                                        disabled="{!isDisable}"/>
                    <apex:CommandButton action="{!refreshLoanBalances}"
                                        value="Cancel"
                                        rerender="loanBalTable"
                                        oncomplete="rerenderHandlerOpenBalance();"
                                        status="loadingPanel"
                                        immediate="true"
                                        disabled="{!isDisable}"/>
                </div>

                <apex:pageMessages id="loanBalpgMsgId" escape="false"/>
                <div class="cmb">
                    <div class="slds-scrollable--x" style="position: relative;">
                    <table  class="contentTable slds-table slds-table--bordered slds-table--striped"
                            border="0" cellpadding="0" cellspacing="0" id="loanBalanceTableInner">
                        <tbody>
                            <tr class="headerRow">
                                <th class="widthRecordSub">#</th>
                                <th class="widthActionSub">Action</th>
                                <apex:repeat value="{!loanBalFieldsetList}" var="loanBalField">
                                    <th class="width10Sub">
                                        <div>
                                            <apex:outputLabel value="{!loanBalField.label}"/>
                                            <apex:OutputPanel rendered="{!AND(fieldPathResult != loanBalField.fieldPath,
                                                                        displaySortingArrow,
                                                                        loanBalField.type != 'multipicklist',
                                                                        loanBalField.type != 'phone')}">
                                                <img src="{!IF(loanBalSortExprFieldApi==loanBalField.fieldPath,
                                                            IF(loanBalSortDirection=='ASC',
                                                            urlfor($Resource.GRIDResource
                                                            ,'GRIDResource/Images/Sort_Asc.png'),
                                                            urlfor($Resource.GRIDResource,
                                                            'GRIDResource/Images/Sort_Desc.png')),
                                                            urlfor($Resource.GRIDResource
                                                            ,'GRIDResource/Images/Sort_Both.png'))}"
                                                     style="height:11px;"
                                                     name="{!loanBalField.fieldPath}"
                                                     class="sorting"
                                                     onclick="sortCallLoanBalances('{!loanBalField.type}');" />
                                            </apex:OutputPanel>
                                        </div>
                                    </th>
                                </apex:repeat>
                            </tr>
                            <apex:repeat value="{!loanBalWrapperLst}" var="loanBalWraper" >
                                <tr class="dataRow">
                                    <td class="widthRecordTdSub">
                                        <apex:outputtext value="{!loanBalWraper.loanBalIndex + 1}"/>
                                    </td>
                                    <td class="widthActionTdSub">
                                        <apex:outputLink value="#"
                                                         target="_blank"
                                                         onclick="openLoanBalancePage('{!loanBalWraper.LoanBal.Id}');"
                                                         rendered="{!NOT(ISBLANK(loanBalWraper.LoanBal.Id))}">
                                            View
                                        </apex:outputLink>
                                        <apex:outputLabel value=" | "
                                                          rendered="{!AND(NOT(ISBLANK(loanBalWraper.loanBal.Id)),
                                                                    $ObjectType.Loan_Balance__c.deletable)}"/>
                                        <apex:commandLink action="{!deleteLoanBalance}"
                                                          value="Del"
                                                          rerender="loanBalTable"
                                                          rendered="{!AND(NOT(ISBLANK(loanBalWraper.loanBal.Id)),
                                                                $ObjectType.Loan_Balance__c.deletable)}"
                                                          status="loadingPanel">
                                            <apex:param name="loanBalIndexToRemove"
                                                        value="{!loanBalWraper.loanBalIndex}"
                                                        assignTo="{!loanBalIndexToRemove}"></apex:param>
                                        </apex:commandLink>
                                        <apex:commandLink action="{!deleteLoanBalance}"
                                                          value="Remove"
                                                          rerender="loanBalTable"
                                                          rendered="{!(ISBLANK(loanBalWraper.LoanBal.Id))}"
                                                          styleClass="removeRow"
                                                          status="loadingPanel"
                                                          immediate="true">
                                            <apex:param name="loanBalIndexToRemove"
                                                        value="{!loanBalWraper.loanBalIndex}"
                                                        assignTo="{!loanBalIndexToRemove}"></apex:param>
                                        </apex:commandLink>
                                    </td>
                                    <apex:repeat value="{!loanBalFieldsetList}" var="loanBalfield">
                                        <td class="width10TdSub {!loanBalfield.type}-field">
                                            <apex:outputField value="{!loanBalWraper.loanBal[loanBalfield]}"
                                                              rendered="{!AND(IF(loanBalWraper.loanBalEdit = false, true, false),
                                                                        NOT(ISBLANK(loanBalWraper.loanBal.Id)))}"/>
                                            <apex:inputField value="{!loanBalWraper.loanBal[loanBalfield]}" 
                                                             rendered="{!OR(IF(loanBalWraper.loanBalEdit = true, true, false),
                                                                    ISBLANK(loanBalWraper.loanBal.Id))}" />
                                        </td>
                                    </apex:repeat>
                                </tr>
                            </apex:repeat>
                        </tbody>
	                    <tfoot>
	                        <tr class ="headerRow">
	                            <td class="widthRecordSub"><b>Total</b></td>
	                            <td class="widthActionSub"></td>
	                            <apex:repeat value="{!loanBalFieldsetList}" var="loanBalfield">
	                                <td class="width10Sub">
	                                    <b>
	                                       <apex:outputText value="{!currencySymbolOpenBalance}{0, number, ###,###,###,##0.00}" 
	                                                        rendered="{!AND(loanBalFieldToSumMap[loanBalfield.fieldPath] != -999.999,
	                                                                   loanBalfield.type =='currency')}" >
	                                           <apex:param value="{!loanBalFieldToSumMap[loanBalfield.fieldPath]}" />
	                                       </apex:outputText>
	                                    </b>
	                                    <b>
		                                    <apex:outputText value="{0, number, ###,###,###,##0.00}" 
		                                        rendered="{!AND(loanBalFieldToSumMap[loanBalfield.fieldPath] != -999.999,
		                                                      loanBalfield.type !='currency')}" >
		                                         <apex:param value="{!loanBalFieldToSumMap[loanBalfield.fieldPath]}" />
		                                    </apex:outputText>
	                                    </b>
	                                </td>
	                            </apex:repeat>
	                        </tr>
	                    </tfoot>
                    </table>
                </div>

                <div style="margin-top: 10px;">
                    {!IF((loanBalOffsetsize + 1) > loanBalRecordCount,
                    IF(loanBalRecordCount - loanBalBlockSize <= 0, 0, loanBalRecordCount - loanBalBlockSize),
                    loanBalOffsetsize + 1)} - {!IF(loanBalWrapperLst != null,loanBalWrapperLst.size + loanBalOffsetsize,0)} 
                    of {!loanBalRecordCount}
                </div>

                <div class="pagination-btn-grp-wrapper">
                    <div class="slds-button-group pagination-btn-grp" role="group">
                        <button class="slds-button slds-button--neutral first"
                                onclick="beginningLoanBalances(); return false;">&lt;&lt;</button>
                        <button class="slds-button slds-button--neutral previous"
                                onclick="previousLoanBalances(); return false;">&lt;</button>
                        <button class="slds-button slds-button--neutral next"
                                onclick="nextLoanBalances(); return false;">&gt;</button>
                        <button class="slds-button slds-button--neutral last"
                                onclick="endLoanBalances(); return false;">&gt;&gt;</button>
                    </div>
                    <script>
                        t$ = jQuery.noConflict();
                        if("{!loanBalOffsetsize != 0}" == 'false') {
                            t$('[title~=openBalance] .pagination-btn-grp .first').attr('disabled', 'disabled');
                            t$('[title~=openBalance] .pagination-btn-grp .previous').attr('disabled', 'disabled');
                        } else {
                            t$('[title~=openBalance] .pagination-btn-grp .first').removeAttr('disabled');
                            t$('[title~=openBalance] .pagination-btn-grp .previous').removeAttr('disabled');
                        }
                        if("{!loanBalWrapperLst.size + loanBalOffsetsize < loanBalRecordCount}" == 'false') {
                            t$('[title~=openBalance] .pagination-btn-grp .next').attr('disabled', 'disabled');
                            t$('[title~=openBalance] .pagination-btn-grp .last').attr('disabled', 'disabled');
                        } else {
                            t$('[title~=openBalance] .pagination-btn-grp .next').removeAttr('disabled');
                            t$('[title~=openBalance] .pagination-btn-grp .last').removeAttr('disabled');
                        }
                    </script>
                </div>
            </div>
            <apex:actionFunction name="beginningLoanBalances" action="{!beginningLoanBalances}"
                    rerender="loanBalTable" oncomplete="rerenderHandlerOpenBalance();"
                    status="loadingPanel"/>
            <apex:actionFunction name="previousLoanBalances" action="{!previousLoanBalances}"
                    rerender="loanBalTable" oncomplete="rerenderHandlerOpenBalance();"
                    status="loadingPanel"/>
            <apex:actionFunction name="nextLoanBalances" action="{!nextLoanBalances}"
                    rerender="loanBalTable" oncomplete="rerenderHandlerOpenBalance();"
                    status="loadingPanel"/>
            <apex:actionFunction name="endLoanBalances" action="{!endLoanBalances}"
                    rerender="loanBalTable" oncomplete="rerenderHandlerOpenBalance();"
                    status="loadingPanel"/>
            </apex:pageBlock>
            <apex:inputHidden value="{!loanBalSortExpression}" id="loanBalSortHiddencriterian"/>
            <apex:inputHidden value="{!loanBalSortDirection}" id="loanBalSortHiddenOrder"/>
            <apex:inputHidden value="{!loanBalSortExprFieldApi}" id="loanBalSortFieldApi"/>
        </apex:outputPanel>

        <apex:actionFunction action="{!newLoanBalance}" 
                             name="newLoanBalance"
                             rerender="loanBalTable"
                             oncomplete="rerenderHandlerOpenBalance();"
                             status="loadingPanel"/>
        <apex:actionFunction action="{!saveLoanBalances}"
                             name="saveLoanBalances"
                             rerender="loanBalTable"
                             oncomplete="rerenderHandlerOpenBalance();"
                             status="loadingPanel"/>
        <apex:actionFunction action="{!sortLoanBalances}"
                             name="sortAllLoanBalances"
                             rerender="loanBalTable"
                             oncomplete="rerenderHandlerOpenBalance();"
                             status="loadingPanel" >
            <apex:param name="loanBalTypeParam" value="" />
        </apex:actionFunction>
    </apex:form>

    <script>
        var isInConsoleOpenBalance = false;
        var tabIdLoanBalance;

        function setEventListenersLoanBalance() {
            t$("[id$='loanBalTable'] .width10TdSub a").click(function() {
                var elementId = event.target.id;
                if(elementId.indexOf('lookup') == 0) {
                    if(isInConsoleOpenBalance) {
                        openConsoleTabOpenBalanceNewTab(event.target.href);
                    }
                    else {
                        window.open(event.target.href);
                    }
                    event.preventDefault();
                }
            });

            t$('[id$=loanBalTable] .slds-scrollable--x').on('scroll', function() {
                t$(':focus').blur();
                t$('.datePicker').css('display', 'none');
            });
        }

        function initCallOffer() {
            setIsConsoleOffer();
            getFocusedPrimaryTabId();
        }

        function getFocusedPrimaryTabId() {
            sforce.console.getFocusedPrimaryTabId(showTabIdLoanBalance);
        }

        var showTabIdLoanBalance = function(result) {
            //Display the tab ID
            tabIdLoanBalance = result.id;
        };

        function runNewLoanBalance()
        {
            setTimeout(function()
            {
                newLoanBalance();
            }, 100);
        }

        function runSaveLoanBalances()
        {
            setTimeout(function()
            {
                saveLoanBalances();
            }, 100);
        }

        function setIsConsoleOffer() {
            var inConsole = false;
            var url = document.location.href;
            inConsole = url.indexOf('isConsole=1') > -1;
            if(inConsole) {
                isInConsoleOpenBalance = inConsole;
            } else {
                isInConsoleOpenBalance = sforce.console.isInConsole();
            }
        }

        function openConsoleTabOpenBalance(url, tabLabel) {
            //testGenerateConsoleURL();
            sforce.console.openPrimaryTab(tabIdLoanBalance, url, true, tabLabel, function(r){});
            sforce.console.closeTab(tabIdLoanBalance);
        }

        function openConsoleTabOpenBalanceNewTab(url, tabLabel) {
            sforce.console.openPrimaryTab(null, url, true, tabLabel, function(r){});
        }

        function openLoanBalancePage(recordIdToOpen) {
            event.preventDefault();
            if(isInConsoleOpenBalance) {
                openConsoleTabOpenBalanceNewTab('/'+recordIdToOpen, 'Open Balance');
            } else  {
                window.open('/'+recordIdToOpen);
            }
        }

        function sortCallLoanBalances(loanBalFieldDataType)
        {
            /*
              event.target will have the DOM structure on which the event is fired.So here salesforce automically will
              pick up native html id of the selector
            */
             var loanBalElement= event.target;
             var newloanBalSortCol = t$(loanBalElement).attr("Name"); // new sort field
             t$("input[id$='loanBalSortFieldApi']").val(newloanBalSortCol);
             var oldloanBalSortCol = t$("input[id$='loanBalSortHiddencriterian']").val();
             var indexLoanBal;
             var loanBalTempSortExpr;
             if(newloanBalSortCol.endsWith('__c'))
             {
                 indexLoanBal = newloanBalSortCol.indexOf('__');
             }
             else if(newloanBalSortCol.endsWith('Id'))
             {
                 indexLoanBal = newloanBalSortCol.indexOf('Id');
             }
            if(indexLoanBal != null) {
                loanBalTempSortExpr = newloanBalSortCol.substring(0, indexLoanBal);
            }
            else
            {
                loanBalTempSortExpr = newloanBalSortCol;
            }

            //if(String(newloanBalSortCol) == String(oldloanBalSortCol))
            if(oldloanBalSortCol.indexOf(loanBalTempSortExpr) != -1)
            {
                if(String(t$("input[id$='loanBalSortHiddenOrder']").val()) == "ASC")
                {
                    t$("input[id$='loanBalSortHiddenOrder']").val("DESC");
                    t$(loanBalElement).removeClass('SortAsc').addClass('SortDesc');
                }
                else
                {
                    t$("input[id$='loanBalSortHiddenOrder']").val("ASC");
                    t$(loanBalElement).removeClass('SortDesc').addClass('SortAsc');
                }
                t$("input[id$='loanBalSortHiddencriterian']").val(newloanBalSortCol);
                sortAllLoanBalances(loanBalFieldDataType);
            }
            else
            {
                t$("input[id$='loanBalSortHiddencriterian']").val(newloanBalSortCol);
                t$("input[id$='loanBalSortHiddenOrder']").val("ASC");
                t$(loanBalElement).removeClass('sorting').addClass('SortAsc');
                sortAllLoanBalances(loanBalFieldDataType);
            }
        }
    </script>
</apex:component>