<apex:page standardController="case" extensions="Case_Controller">
 <apex:form >
 <script>
        function CopyToClipboard () {
            var input = document.getElementById ("clipText");
            
              var textToClipboard = input.innerHTML;
              alert(textToClipboard );
              
            textToClipboard = textToClipboard.replace(/<br>/gm, '\r\n');
             textToClipboard = textToClipboard.replace(/<(?:.|\n)*?>/gm, '');
             textToClipboard = textToClipboard.replace(/&\gt;/g, '>');
             textToClipboard = textToClipboard.replace(/&\lt;/g, '<');
             textToClipboard = textToClipboard.replace(/&nbsp;/g, '');
             
                           

            alert(textToClipboard );
            var success = true;
            if (window.clipboardData) { // Internet Explorer
                window.clipboardData.setData ("Text", textToClipboard);
                
            }
            else {
                    // create a temporary element for the execCommand method
                var forExecElement = CreateElementForExecCommand (textToClipboard);
                 

                        /* Select the contents of the element 
                            (the execCommand for 'copy' method works on the selection) */
                SelectContent (forExecElement);

                var supported = true;

                    // UniversalXPConnect privilege is required for clipboard access in Firefox
                try {
                    if (window.netscape && netscape.security) {
                        netscape.security.PrivilegeManager.enablePrivilege ("UniversalXPConnect");
                         this.jsConsole = Components.classes["@mozilla.org/consoleservice;1"].getService(Components.interfaces.nsIConsoleService);
  this.scriptError = Components.classes["@mozilla.org/scripterror;1"].createInstance(Components.interfaces.nsIScriptError);
                    }

                        // Copy the selected content to the clipboard
                        // Works in Firefox and in Safari before version 5
                    success = document.execCommand ("copy", false, null);
                }
                catch (e) {
                    success = false;
                }
                
                    // remove the temporary element
                document.body.removeChild (forExecElement);
            }

            if (success) {
              //  alert ("The text is on the clipboard, try to paste it!");
            }
            else {
                alert ("Your browser doesn't allow clipboard access!");
            }
        }

        function CreateElementForExecCommand (textToClipboard) {
            var forExecElement = document.createElement ("div");
                // place outside the visible area
            forExecElement.style.position = "absolute";
            forExecElement.style.left = "-10000px";
            forExecElement.style.top = "-10000px";
                // write the necessary text into the element and append to the document
            forExecElement.textContent = textToClipboard;
            document.body.appendChild (forExecElement);
                // the contentEditable mode is necessary for the  execCommand method in Firefox
            forExecElement.contentEditable = true;

            return forExecElement;
        }

        function SelectContent (element) {
                // first create a range
            var rangeToSelect = document.createRange ();
            rangeToSelect.selectNodeContents (element);

                // select the contents
            var selection = window.getSelection ();
            selection.removeAllRanges ();
            selection.addRange (rangeToSelect);
            
        }
    </script>
    <style>
    .classa{
        vertical-align:top; 
    }
    .classb{
    vertical-align:top;
    text-align:left;
    }
    </style>
    <apex:Commandbutton value="Copy Red Flags" onclick="CopyToClipboard()" style="margin-left: 4cm;"/>
    <div id="clipText">

     
    </div>  
    </apex:form>
</apex:page>